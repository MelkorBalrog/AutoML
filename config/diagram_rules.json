{
  /*
    Configuration format overview:
    - "ai_nodes": ["Type", ...] – node types available in the Safety & AI toolbox
    - "ai_relations": ["Label", ...] – relation labels available in the Safety & AI toolbox and treated as Safety & AI links
    - "arch_diagram_types": ["Type", ...] – diagram types considered part of the generic "Architecture Diagram" work product
    - "governance_node_types": ["Type", ...] – node types available in the governance toolbox
    - "gate_node_types": ["Type", ...] – FMEDA/Fault tree gate node types
    - "requirement_rules": { "label": {"action": "verb", "subject": "default subject", "constraint": true|false } }
    - "node_roles": { "Node Type": "subject|action|condition|constraint|object" } – default requirement role per node type
    - "safety_ai_relation_rules": { "Relation": { "Source": ["Target", ...] } } – allowed Safety & AI relationships
    - "connection_rules": { "Diagram": { "Connection": { "Source": ["Target", ...] } } } – per-diagram connection validation rules
    - "node_connection_limits": { "Node Type": max_connections } – maximum number of outgoing connections
    - "guard_nodes": ["Node Type", ...] – nodes that require guard expressions on outgoing flows
  */

  // Types shown in the Safety & AI lifecycle toolbox
  "ai_nodes": [
    "Database",
    "ANN",
    "Data acquisition"
  ],

  // Relation labels treated as Safety & AI links
  "ai_relations": [
    "Annotation",
    "Synthesis",
    "Augmentation",
    "Acquisition",
    "Labeling",
    "Field risk evaluation",
    "Field data collection",
    "AI training",
    "AI re-training",
    "Curation",
    "Ingestion",
    "Model evaluation",
    "Tune",
    "Hyperparameter Validation"
  ],

  // Diagram types considered part of the generic "Architecture Diagram" work product
  "arch_diagram_types": [
    "Use Case Diagram",
    "Activity Diagram",
    "Block Diagram",
    "Internal Block Diagram"
  ],

  // Node types available in the governance toolbox
  "governance_node_types": [
    "Action",
    "CallBehaviorAction",
    "Initial",
    "Final",
    "Decision",
    "Merge",
    "Fork",
    "Join",
    "System Boundary",
    "Work Product",
    "Lifecycle Phase",
    "Stakeholder",
    "KPI"
  ],

  // FMEDA/Fault tree gate node types
  "gate_node_types": [
    "GATE",
    "RIGOR LEVEL",
    "TOP EVENT",
    "FUNCTIONAL INSUFFICIENCY"
  ],

  // Natural language mapping for relationship labels
  // Format: "label": {"action": "verb", "subject": "default subject", "constraint": true|false }
  "requirement_rules": {
    "performs": {"action": "perform"},
    "executes": {"action": "execute"},
    "responsible for": {"action": "be responsible for"},
    "produces": {"action": "produce"},
    "delivers": {"action": "deliver"},
    "uses": {"action": "use"},
    "consumes": {"action": "use"},
    "monitors": {"action": "monitor"},
    "audits": {"action": "audit"},
    "approves": {"action": "approve"},
    "authorizes": {"action": "authorize"},
    "governed by": {"action": "comply with", "constraint": true},
    "constrained by": {"action": "comply with", "constraint": true},
    "ai training": {"action": "train", "subject": "Engineering team"},
    "ai re-training": {"action": "retrain", "subject": "Engineering team"},
    "curation": {"action": "curate", "subject": "Engineering team"},
    "annotation": {"action": "annotate", "subject": "Engineering team"},
    "synthesis": {"action": "synthesize", "subject": "Engineering team"},
    "augmentation": {"action": "augment", "subject": "Engineering team"},
    "acquisition": {"action": "acquire", "subject": "Engineering team"},
    "labeling": {"action": "label", "subject": "Engineering team"},
    "field risk evaluation": {
      "action": "evaluate field risk",
      "subject": "Engineering team"
    },
    "field data collection": {
      "action": "collect field data",
      "subject": "Engineering team"
    },
    "ingestion": {"action": "ingest", "subject": "Engineering team"},
    "model evaluation": {"action": "evaluate model", "subject": "Engineering team"},
    "tune": {"action": "tune", "subject": "Engineering team"},
    "hyperparameter validation": {
      "action": "validate hyperparameters",
      "subject": "Engineering team"
    },
    "association": {"action": "associate with"},
    "communication path": {"action": "communicate with"},
    "include": {"action": "include"},
    "extend": {"action": "extend"},
    "generalize": {"action": "generalize"},
    "generalization": {"action": "generalize"},
    "aggregation": {"action": "aggregate"},
    "composite aggregation": {"action": "compose"},
    "connector": {"action": "connect to"},
    "propagate": {"action": "propagate"},
    "propagate by review": {"action": "propagate by review"},
    "propagate by approval": {"action": "propagate by approval"},
    "re-use": {"action": "re-use"},
    "satisfied by": {"action": "be satisfied by"},
    "derived from": {"action": "be derived from"},
    "trace": {"action": "trace to"},
    "used by": {"action": "be used by"},
    "used after review": {"action": "be used after review"},
    "used after approval": {"action": "be used after approval"}
  },

  // Default requirement role per node type
  // Format: "Node Type": "subject|action|condition|constraint|object"
  "node_roles": {
    "Role": "subject",
    "Actor": "subject",
    "Stakeholder": "subject",
    "Organization": "subject",
    "Business Unit": "subject",
    "Process": "action",
    "Procedure": "action",
    "Activity": "action",
    "Task": "action",
    "Decision": "condition",
    "Policy": "constraint",
    "Principle": "constraint",
    "Standard": "constraint",
    "Guideline": "constraint",
    "Document": "object",
    "Artifact": "object",
    "Data": "object",
    "Record": "object",
    "Database": "object",
    "ANN": "object",
    "Data acquisition": "object",
    "Metric": "constraint",
    "KPI": "constraint"
  },

  // Allowed Safety & AI relationships between node types
  // Format: "Relation": {"Source": ["Allowed Target", ...] }
  "safety_ai_relation_rules": {
    "Acquisition": {"Database": ["Data acquisition"]},
    "Field data collection": {"Database": ["Data acquisition"]},
    "Field risk evaluation": {"Database": ["Data acquisition"]},
    "Annotation": {"ANN": ["Database"]},
    "Synthesis": {"ANN": ["Database"]},
    "Augmentation": {"ANN": ["Database"]},
    "Labeling": {"ANN": ["Database"]},
    "AI training": {"Database": ["ANN"]},
    "AI re-training": {"Database": ["ANN"]},
    "Model evaluation": {"ANN": ["Database"]},
    "Curation": {"Database": ["Database"]},
    "Ingestion": {"Database": ["Database"]}
  },

  // Connection validation rules per diagram type and connection kind
  // Format: "Diagram Type": {"Connection Kind": {"Source": ["Allowed Target", ...] }}
  "connection_rules": {
    "Use Case Diagram": {
      "Association": {"Actor": ["Use Case"], "Use Case": ["Actor"]},
      "Include": {"Use Case": ["Use Case"]},
      "Extend": {"Use Case": ["Use Case"]},
      "Generalize": {"Actor": ["Actor"], "Use Case": ["Use Case"]},
      "Communication Path": {"Actor": ["Actor"]}
    },
    "Block Diagram": {
      "Association": {"Block": ["Block"]},
      "Generalization": {"Block": ["Block"]},
      "Aggregation": {"Block": ["Block"]},
      "Composite Aggregation": {"Block": ["Block"]}
    },
    "Internal Block Diagram": {
      "Connector": {"Part": ["Part", "Port"], "Port": ["Part", "Port"]}
    },
    "Activity Diagram": {
      "Flow": {
        "Initial": ["Action", "CallBehaviorAction", "Decision", "Merge", "Fork", "Join"],
        "Action": ["Action", "CallBehaviorAction", "Decision", "Merge", "Fork", "Join", "Final"],
        "CallBehaviorAction": ["Action", "CallBehaviorAction", "Decision", "Merge", "Fork", "Join", "Final"],
        "Decision": ["Action", "CallBehaviorAction", "Decision", "Merge", "Fork", "Join", "Final"],
        "Merge": ["Action", "CallBehaviorAction", "Decision", "Fork", "Join"],
        "Fork": ["Action", "CallBehaviorAction", "Decision", "Merge", "Fork", "Join"],
        "Join": ["Action", "CallBehaviorAction", "Decision", "Merge"],
        "Final": []
      }
    },
    "Governance Diagram": {
      "Flow": {
        "Initial": ["Action", "Decision", "Merge", "Fork", "Join", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Action": ["Action", "Decision", "Merge", "Fork", "Join", "Final", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Decision": ["Action", "Decision", "Merge", "Fork", "Join", "Final", "Lifecycle Phase", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Merge": ["Action", "Decision", "Merge", "Fork", "Join", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Fork": ["Action", "Decision", "Merge", "Fork", "Join", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Join": ["Action", "Decision", "Merge", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Lifecycle Phase": ["Decision", "Action", "Merge", "Fork", "Join", "Final", "Database", "ANN", "Data acquisition", "Stakeholder", "KPI"],
        "Stakeholder": ["Action", "Decision", "Merge", "Fork", "Join", "Lifecycle Phase", "Work Product", "Stakeholder", "KPI"],
        "KPI": ["Action", "Decision", "Merge", "Fork", "Join", "Lifecycle Phase", "Work Product", "Stakeholder", "KPI"],
        "Final": []
      },
      // Relationships between governance work products and phases
      "Propagate": {"Work Product": ["Work Product"]},
      "Propagate by Review": {"Work Product": ["Work Product"]},
      "Propagate by Approval": {"Work Product": ["Work Product"]},
      "Re-use": {"Work Product": ["Lifecycle Phase"], "Lifecycle Phase": ["Lifecycle Phase"]},
      "Satisfied by": {"Work Product": ["Work Product"]},
      "Derived from": {"Work Product": ["Work Product"]},
      "Trace": {"Work Product": ["Work Product"]},
      "Used By": {"Work Product": ["Work Product"]},
      "Used after Review": {"Work Product": ["Work Product"]},
      "Used after Approval": {"Work Product": ["Work Product"]}
    }
  },

  // Maximum number of connections allowed per node type
  // Format: "Node Type": max_connections
  "node_connection_limits": {
    "Decision": 4,
    "Merge": 4
  },

  // Node types that require guards on outgoing flows
  // Format: ["Node Type", ...]
  "guard_nodes": ["Decision"]
}
