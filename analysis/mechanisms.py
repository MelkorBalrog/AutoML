# Author: Miguel Marina <karel.capek.robotics@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2025 Capek System Safety & Robotic Solutions
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Author: Miguel Marina <karel.capek.robotics@gmail.com>
from analysis.models import DiagnosticMechanism, MechanismLibrary

# Complete list of diagnostic mechanisms from ISO 26262-5:2018 Annex D
ANNEX_D_MECHANISMS = [
    DiagnosticMechanism(
        "CRC",
        0.99,
        "Information redundancy using cyclic redundancy codes to detect data corruption during communication.",
        "Polynomial check bits appended to messages so receivers can verify data integrity and reject corrupted frames.",
    ),
    DiagnosticMechanism(
        "Watchdog",
        0.9,
        "Independent timer supervising program flow and triggering a safe state if not refreshed as expected.",
        "A hardware or software timer that must be periodically reset by the application; failure to do so causes a controlled reset or fallback action.",
    ),
    DiagnosticMechanism(
        "Parity",
        0.8,
        "Single-bit hardware redundancy to detect odd-bit errors in a data stream.",
        "Adds a parity bit to data words allowing detection of any single bit flip during storage or transmission.",
    ),
    DiagnosticMechanism(
        "Heartbeat",
        0.85,
        "Regular status message used to ensure communication peers are alive and responsive.",
        "Periodic message exchanges confirm components are operational; a missing beat indicates a fault in the sender or the network.",
    ),
    DiagnosticMechanism(
        "Range check",
        0.9,
        "Verification that signal values stay within predefined valid limits.",
        "Compares sensor or calculated values against minimum and maximum thresholds to detect implausible states.",
    ),
    DiagnosticMechanism(
        "Failure detection by on-line monitoring",
        0.6,
        "D.2.1.1 Detect failures by monitoring system behaviour during operation.",
        "Observes functional outputs and internal states in real time to identify deviations from expected behaviour.",
    ),
    DiagnosticMechanism(
        "Comparator",
        0.9,
        "D.2.1.2 Compare outputs of independent channels to detect discrepancies.",
        "Runs two redundant calculations or signal paths and raises an error if the results differ beyond tolerance.",
    ),
    DiagnosticMechanism(
        "Majority voter",
        0.9,
        "D.2.1.3 Use majority voting to mask and detect channel failures.",
        "Compares three or more redundant results and selects the majority value while flagging inconsistent channels.",
    ),
    DiagnosticMechanism(
        "Dynamic principles",
        0.75,
        "D.2.2.1 Force change of static signals to detect failures.",
        "Periodically toggle or vary otherwise constant signals so stuck-at faults become observable.",
    ),
    DiagnosticMechanism(
        "Analogue monitoring of digital signals",
        0.6,
        "D.2.2.2 Evaluate digital signals on an analogue level to detect illegal values.",
        "Checks the actual voltage or current of a digital line to reveal short circuits or level shifts.",
    ),
    DiagnosticMechanism(
        "Self-test by software cross exchange",
        0.75,
        "D.2.3.3 Independent units perform self-tests and exchange results.",
        "Each processor runs dedicated test routines and sends the outcomes to its counterpart for comparison.",
    ),
    DiagnosticMechanism(
        "Failure detection by on-line monitoring (electrical)",
        0.9,
        "Table D.3 Monitor electrical elements during operation.",
        "Continuously supervises supply voltages, currents and other electrical parameters for abnormal behaviour.",
    ),
    DiagnosticMechanism(
        "Self-test by software (limited patterns)",
        0.75,
        "D.2.3.1 Software self-test using limited patterns.",
        "Executes a subset of diagnostic instructions or patterns to verify processor functionality on start-up or during idle time.",
    ),
    DiagnosticMechanism(
        "Self-test supported by hardware",
        0.75,
        "D.2.3.2 Hardware assisted self-test for processing units.",
        "Uses built-in test modules such as LBIST or MBIST to exercise logic blocks and memory cells.",
    ),
    DiagnosticMechanism(
        "Software diversified redundancy",
        0.9,
        "D.2.3.4 Two diverse software implementations in one channel.",
        "Runs functionally equivalent algorithms developed differently to reduce common systematic faults.",
    ),
    DiagnosticMechanism(
        "Reciprocal comparison by software",
        0.9,
        "D.2.3.5 Two units exchange and compare results.",
        "Each processing unit repeats the other's calculation and cross-checks the outcomes over a communication link.",
    ),
    DiagnosticMechanism(
        "HW redundancy",
        0.9,
        "D.2.3.6 Redundant hardware such as dual core lockstep.",
        "Provides a second hardware channel executing the same operations so mismatches reveal faults immediately.",
    ),
    DiagnosticMechanism(
        "Configuration register test",
        0.9,
        "D.2.3.7 Verify configuration registers against expected values.",
        "Reads back key configuration bits at start-up and during runtime to ensure critical settings remain unchanged.",
    ),
    DiagnosticMechanism(
        "Stack over/under flow detection",
        0.6,
        "D.2.3.8 Detect violations of stack boundaries.",
        "Monitors the stack pointer against predefined high and low watermarks to catch runaway recursion or memory corruption.",
    ),
    DiagnosticMechanism(
        "Integrated hardware consistency monitoring",
        0.9,
        "D.2.3.9 Use processor hardware exceptions to detect illegal conditions.",
        "Leverages CPU features like privilege violations or memory protection faults to signal unexpected behaviour.",
    ),
    DiagnosticMechanism(
        "Failure detection by on-line monitoring (I/O)",
        0.6,
        "Table D.5 Monitor digital I/O during operation.",
        "Continuously checks I/O pins for stuck-at or short-to faults while the system is active.",
    ),
    DiagnosticMechanism(
        "Test pattern",
        0.9,
        "D.2.4.1 Cyclical test of I/O or sensors using known patterns.",
        "Applies predefined stimulus to inputs or sensors and verifies the expected response paths.",
    ),
    DiagnosticMechanism(
        "Code protection for digital I/O",
        0.75,
        "D.2.4.2 Use information or time redundancy on I/O signals.",
        "Adds checksums or repeated transmissions on control lines so corrupted commands are detected before execution.",
    ),
    DiagnosticMechanism(
        "Multi-channel parallel output",
        0.9,
        "D.2.4.3 Independent outputs compared externally.",
        "Drives the same signal on multiple hardware pins or devices and compares the feedback for divergence.",
    ),
    DiagnosticMechanism(
        "Monitored outputs",
        0.9,
        "D.2.4.4 Compare outputs with independent inputs within a tolerance range.",
        "Measures the physical effect of an actuator with a separate sensor to confirm commanded behaviour.",
    ),
    DiagnosticMechanism(
        "Input comparison/voting",
        0.9,
        "D.2.4.5 Compare redundant inputs (1oo2, 2oo3, etc.).",
        "Uses redundant sensing paths whose values are compared or voted to detect a failed sensor channel.",
    ),
    DiagnosticMechanism(
        "One-bit hardware redundancy",
        0.6,
        "D.2.5.1 Parity bit to detect odd-bit failures on a bus.",
        "Adds a single parity line or bit enabling detection of any odd-numbered bit errors in transmitted data.",
    ),
    DiagnosticMechanism(
        "Multi-bit hardware redundancy",
        0.75,
        "D.2.5.2 Block codes such as CRC or Hamming.",
        "Employs multi-bit error detection and correction codes to identify corrupted words and sometimes repair them.",
    ),
    DiagnosticMechanism(
        "Read back of sent message",
        0.75,
        "D.2.5.9 Transmitter reads message from bus for comparison.",
        "After sending, the transmitter re-receives the frame and compares it to what was intended to verify correct delivery.",
    ),
    DiagnosticMechanism(
        "Complete hardware redundancy",
        0.9,
        "D.2.5.3 Duplicate bus channels for comparison.",
        "Uses two separate communication links carrying the same messages; discrepancies reveal wiring or transceiver faults.",
    ),
    DiagnosticMechanism(
        "Inspection using test patterns",
        0.9,
        "D.2.5.4 Cyclical test of data paths with predefined patterns.",
        "Injects known bit sequences through buses or memories and checks the received pattern for corruption.",
    ),
    DiagnosticMechanism(
        "Transmission redundancy",
        0.75,
        "D.2.5.5 Send information several times in sequence.",
        "Repeats a message multiple times and compares each copy so a transient communication error can be detected.",
    ),
    DiagnosticMechanism(
        "Information redundancy",
        0.75,
        "D.2.5.6 Attach checksum or CRC to transmitted data.",
        "Appends redundant data such as CRC or parity allowing receivers to evaluate integrity.",
    ),
    DiagnosticMechanism(
        "Frame counter",
        0.75,
        "D.2.5.7 Counter in each frame to detect loss or non-refreshment.",
        "Sequential numbers accompany each transmission so missing or out-of-order frames become apparent.",
    ),
    DiagnosticMechanism(
        "Timeout monitoring",
        0.75,
        "D.2.5.8 Monitor time between received messages.",
        "Measures the interval between expected messages and flags an error if the time exceeds set limits.",
    ),
    DiagnosticMechanism(
        "Combined comm. monitoring",
        0.9,
        "Combination of information redundancy, frame counter and timeout monitoring (D.2.5.6-8).",
        "Integrates checksum validation with sequence counting and timeout checks to cover a wide range of communication faults.",
    ),
    DiagnosticMechanism(
        "Voltage or current control (input)",
        0.6,
        "D.2.6.1 Monitor input voltage or current values.",
        "Continuously samples supply or sensor input levels to detect shorts, opens or out-of-range conditions.",
    ),
    DiagnosticMechanism(
        "Voltage or current control (output)",
        0.9,
        "D.2.6.2 Monitor output voltage or current values.",
        "Supervises actuator drive signals or supply rails to ensure commanded values are actually delivered.",
    ),
    DiagnosticMechanism(
        "Watchdog without time-window",
        0.6,
        "D.2.7.1 External watchdog triggered periodically.",
        "Simple watchdog expecting a periodic kick; missing refresh triggers a reset regardless of rate variation.",
    ),
    DiagnosticMechanism(
        "Watchdog with time-window",
        0.75,
        "D.2.7.2 Watchdog with lower and upper triggering limits.",
        "Enhanced watchdog requiring the refresh occur within a specific time range to detect too-fast or too-slow execution.",
    ),
    DiagnosticMechanism(
        "Logical programme sequence monitoring",
        0.75,
        "D.2.7.3 Monitor correct sequence of programme sections.",
        "Tracks program flow by verifying that functions or states occur in the intended order during runtime.",
    ),
    DiagnosticMechanism(
        "Temporal and logical monitoring",
        0.9,
        "D.2.7.4 Combine temporal facilities with logical checks.",
        "Adds timing supervision to sequence monitoring so execution order and duration are both verified.",
    ),
    DiagnosticMechanism(
        "Temporal, logical monitoring with time dependency",
        0.9,
        "D.2.7.5 Programme flow monitoring with relative time windows.",
        "Ensures that each step occurs within a defined time after its predecessor, capturing timing dependencies between tasks.",
    ),
    DiagnosticMechanism(
        "Sensor valid range",
        0.6,
        "D.2.8.1 Detect sensor shorts or opens using out-of-range values.",
        "Compares raw sensor outputs against physical plausibility limits to detect wiring or device faults.",
    ),
    DiagnosticMechanism(
        "Sensor correlation",
        0.9,
        "D.2.8.2 Compare redundant sensors for drift or offsets.",
        "Pairs of sensors measuring the same quantity are compared; significant deviation implies one has failed.",
    ),
    DiagnosticMechanism(
        "Sensor rationality check",
        0.75,
        "D.2.8.3 Compare diverse sensors using a model.",
        "Checks sensor values against a system model or other measurements to confirm they behave logically.",
    ),
    DiagnosticMechanism(
        "Actuator monitoring",
        0.9,
        "D.2.9.1 Monitor actuator operation or feedback for coherence.",
        "Observes actuator position or current draw to ensure the commanded movement actually takes place.",
    ),
]
# Measures from ISO/DPAS 8800:2024 Table 10
PAS_8800_MECHANISMS = [
    DiagnosticMechanism(
        "Architectural measures for OOD inputs",
        1.0,
        "Architectural artefacts such as reject classes can be required to detect out-of-distribution inputs.",
        "",
        "G.3.2.1",
    ),
    DiagnosticMechanism(
        "Diverse redundant models",
        1.0,
        "Diverse redundant models increase robustness to unexpected inputs.",
        "",
        "G.1.2.1",
    ),
    DiagnosticMechanism(
        "Model ensembles",
        1.0,
        "Combining several models can reduce sensitivity to individual model errors.",
        "",
        "G.1.2.2",
    ),
    DiagnosticMechanism(
        "N-version diverse programming",
        1.0,
        "Independent implementations lower the chance of common systematic faults.",
        "",
        "G.1.2.3",
    ),
    DiagnosticMechanism(
        "Selection techniques for architectural redundancy",
        1.0,
        "Architectural redundancy with voting or switching provides confidence in correct outputs despite some wrong predictions.",
        "",
        "G.1.2.5",
    ),
    DiagnosticMechanism(
        "Fault-aware training",
        1.0,
        "Training the AI system to recognise faults helps maintain nominal or degraded operation.",
        "",
        "G.4.2",
    ),
    DiagnosticMechanism(
        "Adversarial training",
        1.0,
        "Reduces sensitivity to malevolent perturbations and increases reliability.",
        "",
        "G.3.2.2/G.4.2",
    ),
    DiagnosticMechanism(
        "Transfer learning for robustness",
        1.0,
        "Leverages robustness demonstrated in the source domain to the target domain.",
        "",
        "G.4.3",
    ),
    DiagnosticMechanism(
        "Data augmentation for robustness",
        1.0,
        "Increasing data diversity helps the model generalise better.",
        "",
        "G.4.9",
    ),
    DiagnosticMechanism(
        "Transfer learning for generalisation",
        1.0,
        "Leverages foundation model capability for the target application.",
        "",
        "G.4.3",
    ),
    DiagnosticMechanism(
        "Regularisation",
        1.0,
        "Regularisation methods help adapt to small input shifts and reject OOD inputs.",
        "",
        "G.4.2",
    ),
    DiagnosticMechanism(
        "Hyperparameter tuning",
        1.0,
        "Tuning hyperparameters reduces underfitting or overfitting to improve generalisation.",
        "",
        "G.4.1",
    ),
    DiagnosticMechanism(
        "Reliability from robustness and resilience measures",
        1.0,
        "Measures supporting robustness, resilience and generalisation also support reliability.",
        "",
        "",
    ),
    DiagnosticMechanism(
        "OOD data mitigation",
        1.0,
        "Detection of out-of-distribution samples triggers updates and keeps the system safe until addressed.",
        "",
        "G.3.1",
    ),
    DiagnosticMechanism(
        "Distributional shift mitigation",
        1.0,
        "Monitoring distributional shifts triggers updates and maintains safety until addressed.",
        "",
        "G.3.2",
    ),
    DiagnosticMechanism(
        "Qualitative and quantitative architecture analysis for resilience",
        1.0,
        "Safety analyses identify need for redundant systems maintaining initial or degraded performance.",
        "",
        "G.2",
    ),
    DiagnosticMechanism(
        "Use of AI and conventional software",
        1.0,
        "Non-AI components can detect errors and switch to redundant or fallback systems.",
        "",
        "G.1.2.6",
    ),
    DiagnosticMechanism(
        "Targeted and controlled model update",
        1.0,
        "Partial updates allow faster resolution while simplifying safety performance testing.",
        "",
        "G.5.2.2",
    ),
    DiagnosticMechanism(
        "Use of AI and non-AI components for controllability",
        1.0,
        "Non-AI components detect errors and switch to fallback systems guaranteeing controllability.",
        "",
        "G.1.2.6",
    ),
    DiagnosticMechanism(
        "Supervisory and backup systems",
        1.0,
        "Safety monitors can take control to ensure the AI system's safety.",
        "",
        "G.1.2.4",
    ),
    DiagnosticMechanism(
        "Architecture analysis for controllability",
        1.0,
        "Analysis helps identify monitoring systems that detect and control AI errors.",
        "",
        "G.2",
    ),
    DiagnosticMechanism(
        "Attention or saliency maps",
        1.0,
        "Provide information on input characteristics influencing model predictions.",
        "",
        "G.4.7",
    ),
    DiagnosticMechanism(
        "Structural coverage of AI component for explainability",
        1.0,
        "White-box methods build confidence by identifying important input features.",
        "",
        "G.4.9.1",
    ),
    DiagnosticMechanism(
        "Identification of software units",
        1.0,
        "Breaking down architecture into units fosters explainability of outputs.",
        "",
        "G.2.1",
    ),
    DiagnosticMechanism(
        "Model ensembles for predictability",
        1.0,
        "Ensembles increase accuracy and foster predictability.",
        "",
        "G.1.2.2",
    ),
    DiagnosticMechanism(
        "Architectural redundancy selection techniques",
        1.0,
        "Voting and switching techniques improve predictive performance.",
        "",
        "G.1.2.5",
    ),
    DiagnosticMechanism(
        "Criteria for retraining",
        1.0,
        "Monitoring criteria such as distributional shift indicates when retraining is required and reveals reduction in robustness, resilience or generalisation.",
        "",
        "G.5.2.1",
    ),
    DiagnosticMechanism(
        "Confidence calibration and uncertainty quantification",
        1.0,
        "Calibrating uncertainty fosters confidence in prediction correctness.",
        "",
        "G.4.4",
    ),
    DiagnosticMechanism(
        "Structural coverage of AI component for predictability",
        1.0,
        "Provides confidence in the comprehensiveness of the testing strategy.",
        "",
        "G.4.9.1",
    ),
    DiagnosticMechanism(
        "Monitoring multiple scores",
        1.0,
        "Tracking metrics like precision, recall and F1-score shows prediction consistency.",
        "",
        "G.4.6",
    ),
    DiagnosticMechanism(
        "Alignment of intention",
        1.0,
        "Ensures the AI system's objectives align with intended outcomes.",
        "",
        "G.6",
    ),
    DiagnosticMechanism(
        "Data coverage techniques for test augmentation",
        1.0,
        "Measuring data distribution across equivalence classes helps identify and reduce bias.",
        "",
        "G.4.9.2",
    ),
    DiagnosticMechanism(
        "Bayesian inference",
        1.0,
        "Uses probabilistic models to quantify prediction uncertainty and improve reliability.",
        "",
        "",
    ),
    DiagnosticMechanism(
        "Monte Carlo dropout",
        1.0,
        "Applies dropout during inference to approximate Bayesian uncertainty for robust decisions.",
        "",
        "",
    ),
    DiagnosticMechanism(
        "Data distillation",
        1.0,
        "Compresses datasets into representative samples to enhance training efficiency while retaining performance.",
        "",
        "",
    ),
    DiagnosticMechanism(
        "Auto data labeling and annotation",
        1.0,
        "Automates labeling processes to accelerate dataset creation and improve consistency.",
        "",
        "",
    ),
]
