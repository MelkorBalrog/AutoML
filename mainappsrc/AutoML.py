from user_manager import UserManager
from project_manager import ProjectManager
from diagram_controller import DiagramController
        self.messagebox = messagebox
        # Delegated managers
        self.user_manager = UserManager(self)
        self.project_manager = ProjectManager(self)
        self.diagram_controller = DiagramController(self)

        file_menu.add_command(label="New AutoML Model", command=self.project_manager.new_model, accelerator="Ctrl+N")
        file_menu.add_command(label="Save AutoML Model", command=self.project_manager.save_model, accelerator="Ctrl+S")
        file_menu.add_command(label="Load AutoML Model", command=self.project_manager.load_model, accelerator="Ctrl+O")
        edit_menu.add_command(label="Edit User Name", command=self.user_manager.edit_user_name, accelerator="Ctrl+U")
        review_menu.add_command(label="Set Current User", command=self.user_manager.set_current_user)
        architecture_menu.add_command(label="Use Case Diagram", command=self.diagram_controller.open_use_case_diagram)
        architecture_menu.add_command(label="Activity Diagram", command=self.diagram_controller.open_activity_diagram)
        architecture_menu.add_command(label="Block Diagram", command=self.diagram_controller.open_block_diagram)
        architecture_menu.add_command(label="Internal Block Diagram", command=self.diagram_controller.open_internal_block_diagram)
        architecture_menu.add_command(label="Control Flow Diagram", command=self.diagram_controller.open_control_flow_diagram)
        root.bind("<Control-n>", lambda event: self.project_manager.new_model())
        root.bind("<Control-s>", lambda event: self.project_manager.save_model())
        root.bind("<Control-o>", lambda event: self.project_manager.load_model())
        root.bind("<Control-u>", lambda event: self.user_manager.edit_user_name())
        root.bind("<Control-p>", lambda event: self.diagram_controller.save_diagram_png())
        self.diagram_controller.save_diagram_png()
        self.project_manager.new_model()
        menu.add_command(label="Edit User Name", command=lambda: self.user_manager.edit_user_name())
        self.diagram_controller.open_use_case_diagram()
        self.diagram_controller.open_activity_diagram()
        self.diagram_controller.open_block_diagram()
        self.diagram_controller.open_internal_block_diagram()
        self.diagram_controller.open_control_flow_diagram()
        self.user_manager.edit_user_name()
        self.project_manager.save_model()
        self.project_manager.load_model()
        self.user_manager.set_current_user()
        self.user_manager.set_current_user()
        return self.user_manager.get_current_user_role()
