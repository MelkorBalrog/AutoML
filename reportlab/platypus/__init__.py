class Table:
    def __init__(self, *args, **kwargs):
        pass

    def setStyle(self, *args, **kwargs):
        pass


class TableStyle:
    def __init__(self, *args, **kwargs):
        pass


class SimpleDocTemplate:
    """Very small stand‑in for ReportLab's ``SimpleDocTemplate``.

    The real class exposes a number of attributes used during PDF generation
    such as ``pagesize`` and the document margins.  The application relies on
    these for layout calculations, so this stub stores them as plain attributes
    which can be queried by the calling code.
    """

    def __init__(self, filename, **kwargs):
        self.filename = filename

        # Basic document geometry
        self.pagesize = kwargs.get("pagesize", (612.0, 792.0))
        self.leftMargin = kwargs.get("leftMargin", 72.0)
        self.rightMargin = kwargs.get("rightMargin", 72.0)
        self.topMargin = kwargs.get("topMargin", 72.0)
        self.bottomMargin = kwargs.get("bottomMargin", 72.0)

    def build(self, flowables):
        """Write a very small placeholder PDF file.

        The real ReportLab library renders the sequence of ``flowables`` into a
        PDF document.  For the purposes of the unit tests we only need a file
        to be created on disk so that callers can proceed as if a report was
        generated.  This ``build`` implementation therefore ignores the
        ``flowables`` and simply writes out a blank single–page PDF using
        Pillow.  If Pillow is not available, a minimal PDF header is written so
        that the file still exists and can be opened by PDF readers.
        """
        try:
            from PIL import Image, ImageDraw

            width_pt, height_pt = self.pagesize
            width_px = int(width_pt)
            height_px = int(height_pt)
            img = Image.new("RGB", (width_px, height_px), "white")
            draw = ImageDraw.Draw(img)
            # A tiny footer to indicate the file was generated by the stub
            draw.text((72, height_px - 72), "Generated by stub", fill="black")
            img.save(self.filename, "PDF")
        except Exception:
            # Fallback: write an extremely small but valid PDF header.
            with open(self.filename, "wb") as fp:
                fp.write(b"%PDF-1.1\n% Stub PDF\n%%EOF")


class Paragraph:
    def __init__(self, *args, **kwargs):
        pass


class Spacer:
    def __init__(self, *args, **kwargs):
        pass


class Image:
    def __init__(self, *args, **kwargs):
        pass


class PageBreak:
    def __init__(self, *args, **kwargs):
        pass


class LongTable(Table):
    pass
